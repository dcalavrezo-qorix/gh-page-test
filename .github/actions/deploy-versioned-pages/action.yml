name: Deploy Versioned Pages
description: Will push the documentation to the gh-pages branch, possibly with a versioned URL.

inputs:
  source_folder:
    description: "Path to the HTML files to deploy in current working directory"
    required: true
  versions_file:
    description: "Path to the versions file on gh-pages branch"
    default: "versions"
  create_comment:
    description: "Create a comment on the PR with the URL to the documentation"
    default: "true"

outputs:
  target_folder:
    description: "The target folder for the documentation"
    value: ${{ steps.calc.outputs.target_folder }}

runs:
  using: "composite"
  steps:
    - name: Determine target_folder
      id: calc
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == 'pull_request_target' || "${{ github.event_name }}" == 'pull_request' ]]; then
          echo "target_folder=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref_name }}" != "main" ]]; then
          echo "target_folder=${{ github.ref_name }}" >> $GITHUB_ENV
        else
          echo "target_folder=/" >> $GITHUB_ENV
        fi

    - name: Prepare the deploy folder
      shell: bash
      run: |
        mkdir -p deploy_root
        mkdir -p version_root
        mv ${{ inputs.source_folder }}/* deploy_root/
        touch deploy_root/.nojekyll

    - name: Checkout `gh-pages` from Base Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}  # Base repository (not the fork)
        ref: gh-pages  # Checkout the `gh-pages` branch
        path: gh-pages  # Store it in a separate folder
        fetch-depth: 1  # Fetch only the latest commit (faster)


    - name: Add target folder to versions file
      shell: bash
      run: |
        VERSIONS_FILE="gh-pages/${{ inputs.versions_file }}"  # Adjusted path

        # Ensure the versions file exists
        if [ ! -f "$VERSIONS_FILE" ]; then
          echo "⚠️ Versions file does not exist. Creating it."
          touch "$VERSIONS_FILE"
        fi

        # Add the target folder only if it's not already in the file
        if ! grep -qx "${{ env.target_folder }}" "$VERSIONS_FILE"; then
          echo "${{ env.target_folder }}" >> "$VERSIONS_FILE"
        fi

        # Move the updated versions file to version_root
        mkdir -p version_root
        mv "$VERSIONS_FILE" version_root/


    - name: Read versions file and format clean-exclude
      id: versions
      shell: bash
      run: |
        VERSIONS_FILE="gh-pages/${{ inputs.versions_file }}"  # Adjusted path

        echo "🔹 Checking versions file at: $VERSIONS_FILE"
        
        # Ensure the versions file exists
        if [ ! -f "$VERSIONS_FILE" ]; then
          echo "⚠️ Versions file does not exist. Creating an empty one."
          touch "$VERSIONS_FILE"
        fi

        # Display contents of versions file
        echo "🔹 Contents of versions file:"
        cat "$VERSIONS_FILE" || echo "⚠️ File is empty"

        # Initialize clean_exclude with .nojekyll
        CLEAN_EXCLUDE=".nojekyll"

        # Compute clean-exclude only if target_folder is NOT root ("/")
        if [[ "${{ env.target_folder }}" != "/" ]]; then
          if [ -s "$VERSIONS_FILE" ]; then
            VERSIONS=$(grep -v '^/$' "$VERSIONS_FILE" | tr '\n' ' ')
            CLEAN_EXCLUDE="$CLEAN_EXCLUDE $VERSIONS"
          fi
        fi

        # Export clean_exclude to GITHUB_ENV
        echo "clean_exclude=$CLEAN_EXCLUDE" >> $GITHUB_ENV

        # Debugging output
        echo "🔹 Clean-exclude list:"
        echo "$CLEAN_EXCLUDE"



    - name: Deploy Documentation
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: deploy_root
        clean: true
        target-folder: ${{ env.target_folder }}
        clean-exclude: ${{ env.clean_exclude }}

    - name: Deploy version file 🚀
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: version_root
        clean: false

    - name: Comment on PR with docs URL
      if: ${{ (github.event_name == 'pull_request_target' || github.event_name == 'pull_request') && inputs.create_comment == 'true' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          The created documentation from the pull request is available at: [docu-html](https://eclipse-score.github.io/score/${{ env.target_folder }})
        reactions: rocket
