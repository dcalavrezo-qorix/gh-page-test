name: Deploy Versioned Pages
description: Will push the documentation to the gh-pages branch, possibly with a versioned URL.

inputs:
  source_folder:
    description: "Path to the HTML files to deploy in current working directory"
    required: true
  versions_file:
    description: "Path to the versions file on gh-pages branch"
    default: "versions"
  create_comment:
    description: "Create a comment on the PR with the URL to the documentation"
    default: "true"

outputs:
  target_folder:
    description: "The target folder for the documentation"
    value: ${{ steps.calc.outputs.target_folder }}

runs:
  using: "composite"
  steps:
    - name: Determine target_folder
      id: calc
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == 'pull_request_target' || "${{ github.event_name }}" == 'pull_request' ]]; then
          echo "target_folder=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref_name }}" != "main" ]]; then
          echo "target_folder=${{ github.ref_name }}" >> $GITHUB_ENV
        else
          echo "target_folder=/" >> $GITHUB_ENV
        fi

    - name: Prepare the deploy folder
      shell: bash
      run: |
        mkdir -p deploy_root
        mkdir -p version_root
        mv ${{ inputs.source_folder }}/* deploy_root/
        touch deploy_root/.nojekyll

    - name: Fetch gh-pages (only if it exists)
      shell: bash
      run: |
        git remote add upstream https://github.com/${{ github.repository }}.git
        if git ls-remote --exit-code upstream gh-pages; then
          git fetch upstream gh-pages --depth 1
          git checkout upstream/gh-pages -- "${{ inputs.versions_file }}"
        else
          echo "gh-pages branch does not exist in upstream. Skipping fetch."
          touch "${{ inputs.versions_file }}"
        fi

    - name: Add target folder to versions file
      shell: bash
      run: |
        if ! grep -qx "${{ env.target_folder }}" "${{ inputs.versions_file }}"; then
          echo "${{ env.target_folder }}" >> "${{ inputs.versions_file }}"
        fi
        mv "${{ inputs.versions_file }}" version_root/

    - name: Read versions file and format clean-exclude
      id: versions
      shell: bash
      run: |
        CLEAN_EXCLUDE=".nojekyll"
        if [[ "${{ env.target_folder }}" != "/" ]]; then
          if [ -f "${{ inputs.versions_file }}" ]; then
            VERSIONS=$(grep -v '^/$' "${{ inputs.versions_file }}" | tr '\n' ' ')
            CLEAN_EXCLUDE="$CLEAN_EXCLUDE $VERSIONS"
          fi
        fi
        echo "clean_exclude=$CLEAN_EXCLUDE" >> $GITHUB_ENV

    - name: Deploy Documentation
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: deploy_root
        clean: true
        target-folder: ${{ env.target_folder }}
        clean-exclude: ${{ env.clean_exclude }}

    - name: Deploy version file ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: version_root
        clean: false

    - name: Comment on PR with docs URL
      if: ${{ (github.event_name == 'pull_request_target' || github.event_name == 'pull_request') && inputs.create_comment == 'true' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          The created documentation from the pull request is available at: [docu-html](https://eclipse-score.github.io/score/${{ env.target_folder }})
        reactions: rocket
